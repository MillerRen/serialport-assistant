import win.ui;
import win.dlg.message;
/*DSG{{*/
mainForm = win.form(text="串口调试助手";right=731;bottom=342;border="dialog frame")
mainForm.add(
AsciiButton={cls="radiobutton";text="AscII";left=165;top=235;right=223;bottom=260;checked=1;font=LOGFONT(h=-16);z=19};
HexRecCheck={cls="checkbox";text="Hex 接收";left=217;top=46;right=288;bottom=68;z=29};
autoRecCheck={cls="checkbox";text="自动换行";left=217;top=23;right=288;bottom=45;checked=1;z=28};
autoSendButton={cls="button";text="自动发送";left=557;top=269;right=636;bottom=301;z=21};
baudrate={cls="combobox";left=92;top=52;right=197;bottom=72;edge=1;items={};mode="dropdownlist";z=7};
baudrateLabel={cls="static";text="波特率:";left=20;top=47;right=76;bottom=77;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=8};
clearRecButton={cls="button";text='清空\u2192';left=214;top=181;right=287;bottom=208;z=30};
clearsendButton={cls="button";text='\u2191清空发送内容';left=228;top=273;right=348;bottom=302;z=26};
closeButton={cls="button";text="关闭";left=114;top=171;right=195;bottom=195;z=6};
comHaoname={cls="static";text="端口号:";left=20;top=17;right=76;bottom=47;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=4};
dataBits={cls="combobox";left=92;top=81;right=197;bottom=101;edge=1;items={};mode="dropdownlist";z=9};
dataBitsLabel={cls="static";text="数据位:";left=20;top=78;right=76;bottom=108;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=10};
groupbox={cls="groupbox";left=14;top=4;right=208;bottom=208;edge=1;z=2};
groupbox2={cls="groupbox";left=14;top=213;right=725;bottom=308;edge=1;z=1};
hexButton={cls="radiobutton";text="Hex";left=106;top=235;right=164;bottom=260;font=LOGFONT(h=-16);z=18};
inputText={cls="edit";left=226;top=230;right=544;bottom=259;border=1;font=LOGFONT(h=-19);z=16};
openButton={cls="button";text="打开";left=20;top=171;right=101;bottom=195;z=5};
parityBit={cls="combobox";left=92;top=111;right=197;bottom=131;edge=1;items={};mode="dropdownlist";z=11};
parityLabel={cls="static";text="校验位:";left=20;top=109;right=76;bottom=139;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=12};
port={cls="combobox";left=92;top=22;right=197;bottom=42;edge=1;items={};mode="dropdownlist";z=3};
receiveText={cls="edit";left=290;top=8;right=719;bottom=206;autohscroll=false;border=1;multiline=1;vscroll=1;z=15};
saveButton={cls="button";text="保存数据";left=214;top=151;right=287;bottom=178;z=31};
sendButton={cls="button";text="手动发送";left=556;top=227;right=718;bottom=259;z=20};
sendDataLabel={cls="static";text="发送数据:";left=19;top=231;right=90;bottom=261;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=17};
sendFileButton={cls="button";text="发送文件";left=23;top=274;right=197;bottom=303;z=27};
sendInterval={cls="edit";text="100";left=449;top=271;right=510;bottom=300;border=1;font=LOGFONT(h=-19);z=24};
static6={cls="static";text="发送周期:";left=367;top=273;right=438;bottom=303;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=23};
static7={cls="static";text="ms";left=512;top=271;right=540;bottom=301;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=25};
stopAutoButton={cls="button";text="停止自动";left=638;top=269;right=717;bottom=301;z=22};
stopBitLabel={cls="static";text="停止位:";left=20;top=139;right=76;bottom=169;align="right";center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=14};
stopBits={cls="combobox";left=92;top=140;right=197;bottom=160;edge=1;items={};mode="dropdownlist";z=13};
transFlieprogress={cls="progress";left=12;top=314;right=724;bottom=333;edge=1;max=100;min=0;z=32}
)
/*}}*/

import thread.command;
import sys.comPort;
import sio;

var setCommList = function(){
	mainForm.baudrate.items = { "300";"600";"1200";"1800";"2400";"4800";"7200";"9600";"19200";"38400";"57600";"115200";"230400";"460800";"921600" };
	mainForm.dataBits.items = { "5";"6";"7";"8" }
	mainForm.parityBit.items = { "none";"even";"odd";"spc";"mrk"; };
	mainForm.stopBits.items = { "1";"1.5";"2" };
	mainForm.port.items =	sys.comPort.list();
	mainForm.port.selIndex = mainForm.port.count;
	mainForm.baudrate.selIndex = 13;
	mainForm.dataBits.selIndex = 4;
	mainForm.parityBit.selIndex = 1;
	mainForm.stopBits.selIndex = 1;
	//其他默认设置
	mainForm.closeButton.disabled = true;
	mainForm.sendButton.disabled = true;
}
//执行默认设置
setCommList();

//定义端口
var sport;
//打开串口
mainForm.openButton.oncommand = function(id,event){
	
	if(sport) {
		sport.close();
	}
	
	if(!mainForm.port.selText) {
		return mainForm.msgboxErr("请选择端口");
	}
    
    
    //打开端口
    sport = sio.port( mainForm.port.selText );
    if(!sport) {
    	return mainForm.msgboxErr("串口打开失败！");
    }
    
	//设置串口(波特率,数据位,停止位,校验位)
	sport.ioctl(tonumber( mainForm.baudrate.selText ),tonumber( mainForm.dataBits.selText ),tonumber( mainForm.stopBits.selText ),mainForm.parityBit.selText);	
	//串口接收到数据触发回调
	sport.termCntIrq(1,function(port){
		var data = sport.read();
		if(!data) return;
		mainForm.receiveText.log( 
    			mainForm.HexRecCheck.checked ? string.trim(string.hex(data," ")) : data,
    			mainForm.autoRecCheck.checked ? '\r\n' : null 
    		);
	} )
		
	//禁用
    mainForm.openButton.disabled = true;
    mainForm.closeButton.disabled = false;
    mainForm.sendButton.disabled = false;
}

//关闭串口
mainForm.closeButton.oncommand = function(id,event){
	//禁用
    mainForm.openButton.disabled = false;
    mainForm.closeButton.disabled = true;
    mainForm.sendButton.disabled = true;
    //关闭串口
    sport.close();
}

// 退出后自动关闭串口
mainForm.onDestroy = function(){
    if(sport) {
    	sport.close();
    }
    
}

//清空接收区
mainForm.clearRecButton.oncommand = function(id,event){
	mainForm.receiveText.text = "";	
}
//保存数据
mainForm.saveButton.oncommand = function(id,event){
	import fsys.dlg;
	var path = fsys.dlg.save("*.txt|*.txt|","指定保存位置和文件名",,mainForm.hwnd,,"CommSavedata.txt");
	var ret = string.save( path,mainForm.receiveText.text );
	if(ret){
		mainForm.msgbox("保存成功!")
	}else {
		mainForm.msgboxErr("保存失败!")
	}
}
//清空发送框内容
mainForm.clearsendButton.oncommand = function(id,event){
	mainForm.inputText.text = "";	
}

//转换数字码
var HexToDec=function(data,len){
	var str="0x";
	for(i=1;len;1){
			str = str++string.right(string.format("%02X", data[ i ]),2);//默认转换成有符号字节，因此取最右边两位  HEX码
		}
	return eval(str );                    	
}
//转换为HEX码
var Hex=function(data,len){
	if(len == null){
		len = #data;
	}
	
	var str="";
	for(i=1;#data;1){
			str = str++" "++string.right(string.format("%02X", data[ i ]),2);//默认转换成有符号字节，因此取最右边两位  HEX码
		}
	return string.trim(str);                    	
}
 //hex转ascii
 var Ascii=function(data){
 	var data = string.replace(data," ","");
	var str="";           
		for(i=1;#data;2){
			str =str ++ string.pack( eval("0x"++data[[i]]++data[[i+1]] ));
		}
	return str; 
}
//初始化单选对象
var sel_Obj = mainForm.AsciiButton.checked ? "ascii" : "hex";
//ascii单选被单击
mainForm.AsciiButton.oncommand = function(id,event){
	if(sel_Obj != "ascii"){
		var strd = string.replace(mainForm.inputText.text,"\s","");
		var tt = string.find(strd,"[^0-9a-fA-F]");
			if(tt != null){
				mainForm.msgboxErr("输入了非十六进制字符!")
				mainForm.hexButton.checked = 1;
				mainForm.AsciiButton.checked = 0;
				return;
			}else {
				if((#strd%2) != 0){	//非偶数
					mainForm.msgboxErr("Hex格式输入错误!")
					mainForm.hexButton.checked = 1;
					mainForm.AsciiButton.checked = 0;
					return;
				}
			}
		sel_Obj = "ascii";
		//将发送内容格式化为ascii码形式 
		mainForm.inputText.text = Ascii(mainForm.inputText.text);
		
	}
}
//hex单选被单击
mainForm.hexButton.oncommand = function(id,event){
	if(sel_Obj != "hex"){
			sel_Obj = "hex";
			var editdata = string.replace(mainForm.inputText.text," ","");
			mainForm.inputText.text = Hex(editdata,);
	}	
}
//手动发送
mainForm.sendButton.oncommand = function(id,event){
    //判断发送内容合法性
	if(sel_Obj == "hex"){
		var strd = string.replace(mainForm.inputText.text,"\s","");
		var tt = string.find(strd,"[^0-9a-fA-F]");
		if(tt != null){
			mainForm.msgboxErr("输入了非十六进制字符!")
			return;
		}else {
			if((#strd%2) != 0){	//非偶数
				mainForm.msgboxErr("Hex格式输入错误!")
				return;
			}
		}
		
	}
	if(!sport) {
		return mainForm.msgboxErr("请打开串口后再发送");
	}
	//发送数据
	var ret = (sel_Obj=="ascii") ? sport.write( mainForm.inputText.text ) : sport.writeHex( mainForm.inputText.text );
	
}
//定义一个全局定时器
var autoTimehwnd;
//停止自动发送
mainForm.stopAutoButton.oncommand = function(id,event){
	mainForm.settimer(autoTimehwnd,-1);
	mainForm.autoSendButton.disabled = false;
}
//开启自动发送
mainForm.autoSendButton.oncommand = function(id,event){
	mainForm.autoSendButton.disabled = true;
	//判断发送内容合法性
	if(sel_Obj == "hex"){
		var strd = string.replace(mainForm.inputText.text,"\s","");
		var tt = string.find(strd,"[^0-9a-fA-F]");
		if(tt != null){
			mainForm.autoSendButton.disabled = false;
			mainForm.msgboxErr("输入了非十六进制字符!")
			return;
		}else {
			if((#strd%2) != 0){	//非偶数
				mainForm.autoSendButton.disabled = false;
				mainForm.msgboxErr("Hex格式输入错误!")
				return;
			}
		}
		
	}
	autoTimehwnd = mainForm.addtimer(
		tonumber(mainForm.sendInterval.text)/*毫秒*/,
		function(hwnd,msg,id,tick){//定时执行代码
			//发送数据
			var ret = (sel_Obj=="ascii") ? sport.write( mainForm.inputText.text ) : sport.writeHex( mainForm.inputText.text );	
		}
	);
}
//发送文件
mainForm.sendFileButton.oncommand = function(id,event){
    import fsys.dlg;
    var path = fsys.dlg.open("所有文件|*.*|",,,mainForm.hwnd);
	sport.transmitAscii(path,
		function(length,bufferSize,buffer,totalLength){
			mainForm.transFlieprogress.max = totalLength;
			mainForm.transFlieprogress.pos = length;
		}
	)
}

mainForm.enableDpiScaling();
mainForm.show();

return win.loopMessage();